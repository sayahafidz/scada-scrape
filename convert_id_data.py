data = [
    "423, P_STR.S1_Door",
    "423, P_STR.S1_Door",
    "423, P_STR.S1_Door",
    "423, P_STR.S1_Door",
    "438, P_STR.S2_Door",
    "438, P_STR.S2_Door",
    "438, P_STR.S2_Door",
    "438, P_STR.S2_Door",
    "453, P_STR.S3_Door",
    "453, P_STR.S3_Door",
    "453, P_STR.S3_Door",
    "453, P_STR.S3_Door",
    "452, P_STR.S3_Mode",
    "462, P_STR.S3_Press",
    "414, P_BPV.Output_BOFF",
    "650, P_BPV.PM_T2_Daya",
    "463, P_STR.S3_Temp",
    "437, P_STR.S2_Mode",
    "447, P_STR.S2_Press",
    "448, P_STR.S2_Temp",
    "422, P_STR.S1_Mode",
    "432, P_STR.S1_Press",
    "433, P_STR.S1_Temp",
    "394, P_B1_TKM.FinalPV_SHTTX",
    "482, P_B2_MXTRM.FinalPV_SFTX",
    "481, P_B2_MXTRM.FinalPV_WFTX",
    "392, P_B1_TKM.FinalPV_SFTX",
    "502, P_PRS.Press4_Run",
    "518, P_PRS.Temp_Digester4",
    "504, P_PRS.Thresher1_Run",
    "513, P_PRS.Ampere_Press4",
    "511, P_PRS.Ampere_Press3",
    "500, P_PRS.Press3_Run",
    "509, P_PRS.Ampere_Press2",
    "498, P_PRS.Press2_Run",
    "507, P_PRS.Ampere_Press1",
    "496, P_PRS.Press1_Run",
    "503, P_PRS.Digester4_Run",
    "514, P_PRS.Ampere_Digester4",
    "517, P_PRS.Temp_Digester3",
    "512, P_PRS.Ampere_Digester3",
    "501, P_PRS.Digester3_Run",
    "516, P_PRS.Temp_Digester2",
    "510, P_PRS.Ampere_Digester2",
    "499, P_PRS.Digester2_Run",
    "515, P_PRS.Temp_Digester1",
    "508, P_PRS.Ampere_Digester1",
    "497, P_PRS.Digester1_Run",
    "523, P_PRS.Ampere_Thresher1",
    "505, P_PRS.Thresher2_Run",
    "524, P_PRS.Ampere_Thresher2",
    "480, P_B2_MXTRM.FinalPV_WLTX",
    "413, P_BPV.Output_MUP",
    "421, P_STR.S1_Condenssate",
    "420, P_STR.S1_Exhaust",
    "435, P_STR.S2_Exhaust",
    "436, P_STR.S2_Cond",
    "450, P_STR.S3_Exhaust",
    "451, P_STR.S3_Cond",
    "624, P_BPV.PM_GCat_Daya",
    "406, P_BPV.Blow_Off_AM",
    "483, P_B2_MXTRM.FinalPV_PTX",
    "393, P_B1_TKM.FinalPV_PTX",
    "408, P_BPV.Tekanan_BPV",
    "405, P_BPV.Make_Up_AM",
    "449, P_STR.S3_Inlet",
    "434, P_STR.S2_Inlet",
    "419, P_STR.S1_Inlet",
    "683, P_BPV.Temp_Final_PV",
    "", "", "", "", "", "",
    "547, P_KLFKS.Run_SolidConv1",
    "540, P_KLFKS.Run_Decanter1",
    "541, P_KLFKS.Run_Decanter2",
    "546, P_KLFKS.Run_RO_Pump2",
    "542, P_KLFKS.Run_Vibro1",
    "543, P_KLFKS.Run_Vibro2",
    "553, P_KLFKS.Suhu_CST1",
    "554, P_KLFKS.Suhu_CST2",
    "", "", "", "", "", "",
    "545, P_KLFKS.Run_RO_Pump1",
    "548, P_KLFKS.Run_SolidConv2",
    "694, P_PRS.Final_PV_Flow_Meter_Oil",
    "556, P_KLFKS.Ampere_Decanter2",
    "555, P_KLFKS.Ampere_Decanter1",
    "637, P_BPV.PM_T1_Daya",
    "699, P_PRS.Oil_Flow_Tot1",
    "700, P_PRS.Oil_Flow_Tot2",
    "712, P_KLFKS.FM_DCNTR1_tot2",
    "713, P_KLFKS.FM_DCNTR2_tot1",
    "714, P_KLFKS.FM_DCNTR2_tot2",
    "647, P_BPV.PM_T1_Frequency",
    "673, P_BPV.PM_GMan_Frequency",
    "634, P_BPV.PM_GCat_Frequency",
    "660, P_BPV.PM_T2_Frequency",
    "382, P_B1_TKM.Run_SecFan",
    "381, P_B1_TKM.Run_FDF",
    "380, P_B1_TKM.Run_IDF",
    "389, P_B1_TKM.Run_FWP2",
    "472, P_B2_MXTRM.Run_FDF",
    "471, P_B2_MXTRM.Run_IDF",
    "474, P_B2_MXTRM.Run_Feed_Water_Pump",
    "473, P_B2_MXTRM.Run_Fuel_Dist_Fan",
    "686, P_B1_TKM.Run_FWP_1",
    "579, P_KLFKS.PV_FM_DCTR2",
    "563, P_KLFKS.PV_FM_DCTR1",
    "711, P_KLFKS.FM_DCNTR1_tot1",
    "376, P_B1_TKM.WaterLevel_HL",
    "377, P_B1_TKM.WaterLevel_LL",
    "378, P_B1_TKM.WaterLevel_XL",
    "467, P_B2_MXTRM.WaterLevel_HL",
    "468, P_B2_MXTRM.WaterLevel_LL",
    "469, P_B2_MXTRM.WaterLevel_XL",
    "395, P_B1_TKM.FinalPV_OGTTX",
    "391, P_B1_TKM.FinalPV_WFTX",
    "390, P_B1_TKM.FinalPV_WLTX",
    "526, P_PRS.Alarm_Status_D1",
    "723, P_PRS.FinalOut_LVL_D1",
    "529, P_PRS.Alarm_Status_D4",
    "726, P_PRS.FinalOut_LVL_D4",
    "528, P_PRS.Alarm_Status_D3",
    "725, P_PRS.FinalOut_LVL_D3",
    "527, P_PRS.Alarm_Status_D2",
    "724, P_PRS.FinalOut_LVL_D2",
    "407, P_BPV.Tekanan_Boiler",
    "663, P_BPV.PM_GMan_Daya",
]

# Create a dictionary to keep IDs and unique entries
unique_data = {}
for entry in data:
    if entry:  # Only process non-empty entries
        id_, name = entry.split(", ", 1)
        unique_data[int(id_)] = name.strip()  # Store the ID as an integer key

# Print the resulting dictionary with the required format
for id_, name in sorted(unique_data.items()):
    print(f'  {id_}: "{name}",')